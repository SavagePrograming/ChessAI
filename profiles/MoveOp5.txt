Timer unit: 1e-06 s

Total time: 7.25426 s
File: Functions.py
Function: check at line 18

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    18                                           @profile
    19                                           def check(board, b1, color, num, c2, list_, level, screen):#, fastfast,_
    20                                               ##    print ":)", LIST[1]
    21                                               ##+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    22                                               #Display The board
    23                                               ##+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    24                                               #b1.show(screen)
    25                                               ##+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    26                                               #Makes a new board
    27                                               ##+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    28                                               # b2 = create_b(board)
    29                                               # map(Square.Square.check, b2.array_square_Squares, [b2] * len(b2.array_square_Squares))
    30                                           
    31                                               ##+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    32                                               #Makes the Moves
    33                                               ##+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    34        21           95      4.5      0.0      moves = []
    35        21          101      4.8      0.0      def test(sq):
    36                                                   return sq.str_color == color and not sq.array_coordinate_Possible_Moves == []
    37                                           
    38        21           98      4.7      0.0      def checkextend(sq):
    39                                                   moves.extend(map(Move.Move, [sq.coordinate_location] * len(sq.array_coordinate_Possible_Moves),
    40                                                                    sq.array_coordinate_Possible_Moves, [board] * len(sq.array_coordinate_Possible_Moves),
    41                                                                    [color] * len(sq.array_coordinate_Possible_Moves)))
    42                                               # extend = list.extend
    43                                               # for sq in board.array_square_Squares:
    44                                               #     if sq.str_color == color:
    45                                               #         if not sq.array_coordinate_Possible_Moves == []:
    46                                               #             # for loc in sq.array_coordinate_Possible_Moves:
    47                                               #             #     moves.append(Move.Move(sq.loc, loc, board, color))
    48                                               #             length = len(sq.array_coordinate_Possible_Moves)
    49                                               #             extend(moves, map(Move.Move, [sq.coordinate_location] * length, sq.array_coordinate_Possible_Moves,
    50                                               #  [board] * length, [color] * length))
    51                                           
    52        21         2504    119.2      0.0      array_square_SQ = filter(test, board.array_square_Squares)
    53        21      3742012 178191.0     51.6      map(checkextend, array_square_SQ)
    54                                               ##+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    55                                               #For fast Mode(non functional)
    56                                               ##+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    57                                               # if fast_:
    58                                               #     pass
    59                                               # if num == level:
    60                                               #     del_list = []
    61                                               #     for move in moves:
    62                                               #         move.__check__(b2, b1, c2, screen)
    63                                               #         if move.min == 1000:
    64                                               #             del_list.append(move)
    65                                               #     for move in del_list:
    66                                               #         moves.remove(move)
    67                                               # nmoves = []
    68                                               # _moves = moves
    69                                               # for i in xrange(0, 2):
    70                                               #     __best__ = _moves[0]
    71                                               #     for move in _moves:
    72                                               #         if move.score > __best__.score:
    73                                               #             __best__ = move
    74                                               #     nmoves.append(__best__)
    75                                               #     _moves.remove(__best__)
    76                                               # moves = nmoves
    77                                               ##+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    78                                               #Has the moves Check
    79                                               #Add Web Check Here
    80                                               ##+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    81                                               # elif not fast_:
    82                                               #check = Move.Move.check
    83                                               #num_ = len(moves)
    84        21          267     12.7      0.0      map(Move.Move.check, moves, [board] * len(moves), [b1] * len(moves), [num] * len(moves),
    85        21          179      8.5      0.0          [c2] * len(moves), [[list_[1], moves]] * len(moves),
    86        21      3508907 167090.8     48.4          [level] * len(moves), [screen] * len(moves))  # [fast] * len(moves),, [fast_] * len(moves)
    87                                                   # for move in moves:
    88                                                   #     check(move, board, b1, num, c2, [list_[1], moves], fast, level, screen, fast_)
    89                                               ##+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    90                                               #returns the moves it has made. 
    91                                               ##+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    92        21           96      4.6      0.0      return moves

Total time: 7.18029 s
File: Move.py
Function: check at line 199

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   199                                               @profile
   200                                               def check(self, b2, b1, num, c2, LIST, level, screen):#fast_, fast
   201                                                   ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   202                                                   #This is likely the most inportant function in this game.
   203                                                   #Because it is the scource of the AI. Tagicaly I am
   204                                                   #commenting this years after it was written, or mabey just
   205                                                   #a year, anyways, beacuase i can not remeber what everything does
   206                                                   ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   207                                           
   208                                                   ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   209                                                   #prepares variables
   210                                                   ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   211       420         2050      4.9      0.0          num = num - 1
   212       420         1888      4.5      0.0          color = 0
   213                                                   ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   214                                                   #Creates New Board, deleting the old on in the process(prevents Mem Leak)
   215                                                   ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   216       420       479231   1141.0      6.7          b2 = Functions.create_b(b2)
   217                                           
   218       420        66978    159.5      0.9          Functions.move_(b2, self.locsq.str_Name, self.tarsq.str_Name)
   219                                           
   220       420      3049305   7260.2     42.5          map(Square.Square.check, b2.array_square_Squares, [b2] * len(b2.array_square_Squares))
   221                                                   ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   222                                                   #Sets color?
   223                                                   ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   224       420         2374      5.7      0.0          if self.color == 'b':
   225       400         1797      4.5      0.0              color = 'w'
   226       420         1960      4.7      0.0          if self.color == 'w':
   227        20           86      4.3      0.0              color = 'b'
   228                                                   ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   229                                                   #Check! :
   230                                                   ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   231       420         1883      4.5      0.0          II = False
   232                                                   ##        print type(LIST), LIST[0]
   233                                                   # delet = self.delet
   234                                           
   235       420         2050      4.9      0.0          def test(t):
   236                                                       return t == LIST[1]
   237                                                   # delet = Move.delet
   238                                           
   239       420         2162      5.1      0.0          if not self.color == c2 and self.score == 1000:
   240                                                       stuff = filter(test, LIST[0])
   241                                                       II = not len(stuff) == []
   242                                                       map(LIST.remove, stuff)
   243                                           
   244                                                   # if not self.color == c2:
   245                                                   #     if self.score == 1000:
   246                                                   #         for t in LIST[0]:
   247                                                   #             if t == LIST[1]:
   248                                                   #                 LIST.remove(t)  # , LIST)
   249                                                   #                 II = True
   250                                                   #                 break
   251                                                   ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   252                                                   #Continues recursivly, unless the end is reaced, or the king is checked,
   253                                                   #or ?the color failed to be set?, I don't know why that is there.
   254                                                   ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   255       420         1939      4.6      0.0          if not num == 0 and not color == 0 and not II:
   256        20      3544858 177242.9     49.4              self.moves = Functions.check(b2, b1, color, num, c2, LIST, level, screen,)#fast, fast_)
   257                                                   ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   258                                                   #If the end is reach sets the Min, Max and Average to The score
   259                                                   ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   260       420         1929      4.6      0.0          if num == 0:
   261       400         2359      5.9      0.0              self.min = self.max = self.av = self.score
   262                                                   ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   263                                                   #Otherwise it calulates them
   264                                                   ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   265                                                   else:
   266                                                       ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   267                                                       #Calculating Average
   268                                                       ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   269        20           90      4.5      0.0              av = 0
   270        20           98      4.9      0.0              test = 0
   271        20           85      4.2      0.0              t2 = 0
   272        20           87      4.3      0.0              test2 = 0
   273        20          101      5.0      0.0              t3 = 0
   274       420         1938      4.6      0.0              for move in self.moves:
   275       400         2037      5.1      0.0                  av += move.av
   276       400         1920      4.8      0.0                  if move.max > test:
   277                                                               test = move.max
   278       400         1905      4.8      0.0                  if move.score > t2:
   279                                                               t2 = move.score
   280       400         1842      4.6      0.0                  if move.min < test:
   281                                                               test2 = move.min
   282       400         1870      4.7      0.0                  if move.score < t2:
   283                                                               t3 = move.score
   284        20          102      5.1      0.0              self.min = self.score - test
   285        20          110      5.5      0.0              self.min_ = -t2
   286        20          673     33.6      0.0              self.av_ = av = float(av) / func.length(self.moves) + 1
   287        20          118      5.9      0.0              self.av = self.score - av
   288        20           98      4.9      0.0              self.max = self.score - test2
   289        20          110      5.5      0.0              self.max_ = -t3
   290                                                       #print self.av
   291                                                       ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   292                                                       #Calculating Minimum
   293                                                       ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   294                                                       ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   295                                                       #Calculating Maximum
   296                                                       ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   297                                                       ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   298                                                       #Prevents king from moving into check
   299                                                       ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   300                                           
   301        20          101      5.0      0.0              remove = list.remove
   302        20           97      4.8      0.0              if self.color == c2:
   303       420         1869      4.5      0.0                  for move in self.moves:
   304       400         2096      5.2      0.0                      for j in move.moves:
   305                                                                   if j.min_ == -1000:
   306                                                                       remove(move.moves,j)
   307        20           96      4.8      0.0              if not self.color == c2:
   308                                                           moves_ = self.moves
   309                                                           for j in self.moves:
   310                                                               if j.min_ == -1000:
   311                                                                   remove(moves_, remove(j))


Timer unit: 1e-06 s

Total time: 14.0614 s
File: Square.py
Function: check at line 102

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   102                                               @profile
   103                                               def check(self, board):
   104                                           
   105                                                   # if self.rule_num == 0:
   106                                                   # pass
   107                                                   #==================================================================================
   108                                                   #For pawn
   109                                                   #==================================================================================
   110     53888       522031      9.7      3.7          if self.rule_num == 1:
   111     13472       126264      9.4      0.9              append = list.append
   112     13472       123630      9.2      0.9              p_m = []
   113     13472       126685      9.4      0.9              x = self.x
   114     13472       125860      9.3      0.9              y = self.y
   115     13472       125439      9.3      0.9              b = board.b
   116     13472       125875      9.3      0.9              color = self.color
   117     13472       126170      9.4      0.9              if color == 'w':
   118      6736        62112      9.2      0.4                  test = True
   119      6736        62048      9.2      0.4                  if not x == 7:
   120      6736        64679      9.6      0.5                      sq = b[(x + 1)][y]
   121      6736        63526      9.4      0.5                      if sq.image == 0:
   122      6551        69823     10.7      0.5                          append(p_m, [x + 1, y])
   123                                                               else:
   124       185         1731      9.4      0.0                          test = False
   125      6736        63144      9.4      0.4                      if not y == 7:
   126      5894        56837      9.6      0.4                          sq = b[x + 1][y + 1]
   127      5894        57246      9.7      0.4                          if not sq.image == 0 and not sq.color == color:
   128        14          149     10.6      0.0                              append(p_m, [x + 1, y + 1])
   129      6736        62944      9.3      0.4                      if not y == 0:
   130      5894        56681      9.6      0.4                          sq = b[x + 1][y - 1]
   131      5894        57351      9.7      0.4                          if not sq.image == 0 and not sq.color == color:
   132        14          151     10.8      0.0                              append(p_m, ([x + 1, y - 1]))
   133                                           
   134      6736        62713      9.3      0.4                  if x == 1:
   135      6064        57799      9.5      0.4                      sq = b[x + 2][y]
   136      6064        57864      9.5      0.4                      if not sq.image == 0:
   137                                                                   test = False
   138                                                           else:
   139       672         6286      9.4      0.0                      test = False
   140                                           
   141      6736        62061      9.2      0.4                  if test:
   142      5895        61654     10.5      0.4                      append(p_m, ([x + 2, y]))
   143      6736        62904      9.3      0.4                  if x == 7:
   144                                                               self.image = Images.White.queen
   145                                                               self.image_loc = 'pictures/queen.png'
   146                                                               self.rule_num = 5
   147     13472       126495      9.4      0.9              if color == 'b':
   148      6736        62290      9.2      0.4                  test = True
   149      6736        62561      9.3      0.4                  if not x == 0:
   150      6736        64869      9.6      0.5                      sq = b[x - 1][y]
   151      6736        64289      9.5      0.5                      if sq.image == 0:
   152      6560        70486     10.7      0.5                          append(p_m, ([x - 1, y]))
   153                                                               else:
   154       176         1643      9.3      0.0                          test = False
   155                                           
   156      6736        62972      9.3      0.4                      if not y == 7:
   157      5894        57202      9.7      0.4                          sq = b[x - 1][y + 1]
   158      5894        57437      9.7      0.4                          if not sq.image == 0 and not sq.color == color:
   159        14          146     10.4      0.0                              append(p_m, ([x - 1, y + 1]))
   160                                           
   161      6736        63012      9.4      0.4                      if not y == 0:
   162      5894        56893      9.7      0.4                          sq = b[x - 1][y - 1]
   163      5894        59100     10.0      0.4                          if not sq.image == 0 and not sq.color == color:
   164        14          147     10.5      0.0                              append(p_m, ([x - 1, y - 1]))
   165                                           
   166      6736        63154      9.4      0.4                  if x == 6:
   167      6096        58198      9.5      0.4                      sq = b[x - 2][y]
   168      6096        58341      9.6      0.4                      if not sq.image == 0:
   169                                                                   test = False
   170                                                           else:
   171       640         6016      9.4      0.0                      test = False
   172      6736        62384      9.3      0.4                  if test:
   173      5936        62658     10.6      0.4                      append(p_m, ([x - 2, y]))
   174      6736        63225      9.4      0.4                  if x == 0:
   175                                                               self.image = Images.Black.queen
   176                                                               self.image_loc = 'pictures/bqueen.png'
   177                                                               self.rule_num = 5
   178     13472       137699     10.2      1.0              self.p_m = p_m
   179                                                   #==================================================================================
   180                                                   #For rook
   181                                                   #==================================================================================
   182     40416       384646      9.5      2.7          elif self.rule_num == 2:
   183      3368        31687      9.4      0.2              p_m = []
   184      3368        32130      9.5      0.2              x = self.x
   185      3368        32166      9.6      0.2              y = self.y
   186      3368        32131      9.5      0.2              b = board.b
   187      3368        32086      9.5      0.2              color = self.color
   188                                           
   189      3368        33564     10.0      0.2              def append_2_x(self, item):
   190                                                           list.append(self, [ x , item])
   191                                           
   192      3368        32751      9.7      0.2              def append_2_y(self, item):
   193                                                           list.append(self, [item, y])
   194                                           
   195      3368        32801      9.7      0.2              def test4(number):
   196                                                           test = True
   197                                                           for square in b[x]:
   198                                                               if (y > square.y > number or y < square.y < number) and not square.image == 0:
   199                                                                   test = False
   200                                                                   break
   201                                                           return test and (b[x][number].image == 0 or not b[x][number].color == color)
   202                                           
   203      3368        32684      9.7      0.2              def test3(number):
   204                                                           test = True
   205                                                           for row in b:
   206                                                               if (x > row[y].x > number or x < row[y].x < number) and not row[y].image == 0:
   207                                                                   test = False
   208                                                                   break
   209                                                           return test and (b[number][y].image == 0 or not b[number][y].color == color)
   210                                           
   211      3368       431289    128.1      3.1              numbers = filter(test4, xrange(0, 8))
   212      3368        42576     12.6      0.3              map(append_2_x, [p_m] * len(numbers), numbers)
   213                                           
   214      3368       459328    136.4      3.3              numbers = filter(test3, xrange(0, 8))
   215      3368        41794     12.4      0.3              map(append_2_y, [p_m] * len(numbers), numbers)
   216      3368        35024     10.4      0.2              self.p_m = p_m
   217                                           
   218                                                   #==================================================================================
   219                                                   #For Knight
   220                                                   #==================================================================================
   221     37048       355131      9.6      2.5          elif self.rule_num == 3:
   222      3368        31671      9.4      0.2              p_m = []
   223      3368        32135      9.5      0.2              x = self.x
   224      3368        32249      9.6      0.2              y = self.y
   225      3368        32293      9.6      0.2              b = board.b
   226      3368        33093      9.8      0.2              color = self.color
   227      3368        31487      9.3      0.2              List_ = []
   228                                           
   229      3368        44735     13.3      0.3              map(func.append_6, [List_] * 8, [b] * 8, [x] * 8, [y] * 8, [2, 2, -2, -2, 1, 1, -1, -1],
   230      3368       129376     38.4      0.9                  [1, -1, 1, -1, 2, -2, 2, -2], [color] * 8)
   231      3368       143236     42.5      1.0              numbers = filter(filterer, List_)
   232      3368        71312     21.2      0.5              map(func.append_2by2, [p_m] * len(numbers), numbers)
   233                                           
   234      3368        34956     10.4      0.2              self.p_m = p_m
   235                                                   #==================================================================================
   236                                                   #For Bishup
   237                                                   #==================================================================================
   238     33680       322509      9.6      2.3          elif self.rule_num == 4:
   239      3368        32058      9.5      0.2              p_m = []
   240      3368        32386      9.6      0.2              x = self.x
   241      3368        32409      9.6      0.2              y = self.y
   242      3368        32138      9.5      0.2              b = board.b
   243      3368        32235      9.6      0.2              color = self.color
   244      3368        31726      9.4      0.2              List = []
   245      3368        31773      9.4      0.2              List_ = []
   246      3368        38366     11.4      0.3              map(func.append_5, [List_] * 28,
   247      3368        35176     10.4      0.3                  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
   248      3368        35251     10.5      0.3                  [1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1],
   249      3368        38478     11.4      0.3                  [1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7], [x] * 28,
   250      3368       313860     93.2      2.2                  [y] * 28)
   251                                           
   252      3368       309190     91.8      2.2              numbers = filter(test5, List_)
   253      3368        33318      9.9      0.2              num = len(numbers)
   254      3368       130427     38.7      0.9              map(append_Bishup, [List] * num, numbers, [b] * num)
   255                                           
   256      3368        34739     10.3      0.2              def test6(square):
   257                                                           xnum = (square.x - x) / abs(square.x - x)
   258                                                           ynum = (square.y - y) / abs(square.y - y)
   259                                                           test = True
   260                                                           if not abs(square.x - x) == 0:
   261                                                               num = abs(square.x - x)
   262                                                           else:
   263                                                               num = abs(square.y - y)
   264                                                           for number in xrange(1, num):
   265                                                               if not b[x + xnum * number][y + ynum * number].image == 0:
   266                                                                   test = False
   267                                                           return test and not square == 0 and (square.image == 0 or not square.color == color)
   268                                           
   269      3368       395932    117.6      2.8              numbers = filter(test6, List)
   270                                           
   271      3368        47786     14.2      0.3              map(append_SQ, [p_m] * len(numbers), numbers)
   272                                           
   273      3368        34629     10.3      0.2              self.p_m = p_m
   274                                                   #==================================================================================
   275                                                   #For Queen
   276                                                   #==================================================================================
   277     30312       292528      9.7      2.1          elif self.rule_num == 5:
   278                                                       #append = list.append
   279      1684        16091      9.6      0.1              p_m = []
   280      1684        16154      9.6      0.1              x = self.x
   281      1684        16111      9.6      0.1              y = self.y
   282      1684        16221      9.6      0.1              b = board.b
   283      1684        16275      9.7      0.1              color = self.color
   284      1684        16013      9.5      0.1              List = []
   285      1684        15845      9.4      0.1              List_ = []
   286      1684        18902     11.2      0.1              map(func.append_5, [List_] * 56,
   287      1684        16707      9.9      0.1                  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0,
   288      1684        18136     10.8      0.1                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
   289      1684        16725      9.9      0.1                  [-1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1,
   290      1684        18348     10.9      0.1                   -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1],
   291      1684        16794     10.0      0.1                  [1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1,
   292      1684       305362    181.3      2.2                   2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7], [x] * 56, [y] * 56)
   293                                           
   294      1684       292509    173.7      2.1              numbers = filter(test5, List_)
   295      1684        17006     10.1      0.1              num = len(numbers)
   296      1684       149139     88.6      1.1              map(append_Bishup, [List] * num, numbers, [b] * num)
   297      1684        87122     51.7      0.6              @profile
   298                                                       def test6(square):
   299                                                           test = True
   300                                           
   301                                                           # x_ = square.x - x
   302                                                           # y_ = square.y - y
   303                                                           if not (square.x - x) == 0:
   304                                                               xnum = (square.x - x) / abs(square.x - x)
   305                                                               num = abs(square.x - x)
   306                                                               if not (square.y - y) == 0:
   307                                                                   ynum = (square.y - y) / abs(square.y - y)
   308                                                               else:
   309                                                                   ynum = 0
   310                                                           else:
   311                                                               xnum = 0
   312                                                               num = abs(square.y - y)
   313                                                               ynum = (square.y - y) / abs(square.y - y)
   314                                           
   315                                           
   316                                                           for number in xrange(1, num):
   317                                                               if not b[x + xnum * number][y + ynum * number].image == 0:
   318                                                                   test = False
   319                                                           return test and not square == 0 and (square.image == 0 or not square.color == color)
   320                                           
   321      1684      3633060   2157.4     25.8              numbers = filter(test6, List)
   322                                           
   323      1684        25708     15.3      0.2              map(append_SQ, [p_m] * len(numbers), numbers)
   324                                           
   325      1684        17524     10.4      0.1              self.p_m = p_m
   326                                           
   327                                                   #==================================================================================
   328                                                   #For King
   329                                                   #==================================================================================
   330     28628       278977      9.7      2.0          elif self.rule_num == 6:
   331      1684        16072      9.5      0.1              p_m = []
   332      1684        16365      9.7      0.1              x = self.x
   333      1684        16590      9.9      0.1              y = self.y
   334      1684        16370      9.7      0.1              b = board.b
   335      1684        26972     16.0      0.2              color = self.color
   336                                                       #[-1, -1, -1, 0, 0, 1, 1, 1]
   337                                                       #[-1, 0, 1, -1, 1, -1, 0, 1]
   338                                           
   339      1684        16042      9.5      0.1              List = []
   340                                           
   341      1684        22404     13.3      0.2              map(func.append_6, [List] * 8, [x] * 8, [y] * 8, [b] * 8,
   342      1684        68314     40.6      0.5                  [-1, -1, -1, 0, 0, 1, 1, 1], [-1, 0, 1, -1, 1, -1, 0, 1], [color] * 8)
   343                                           
   344      1684        80255     47.7      0.6              numbers = filter(KingFilter, List)
   345                                           
   346      1684        22682     13.5      0.2              map(appendKing, [p_m] * len(numbers), numbers)
   347                                           
   348      1684        16486      9.8      0.1              self.p_m = p_m

Total time: 1.68296 s
File: Square.py
Function: test6 at line 297

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   297                                                       @profile
   298                                                       def test6(square):
   299     35364       120451      3.4      7.2                  test = True
   300                                           
   301                                                           # x_ = square.x - x
   302                                                           # y_ = square.y - y
   303     35364       134182      3.8      8.0                  if not (square.x - x) == 0:
   304     23576       103638      4.4      6.2                      xnum = (square.x - x) / abs(square.x - x)
   305     23576        90461      3.8      5.4                      num = abs(square.x - x)
   306     23576        86981      3.7      5.2                      if not (square.y - y) == 0:
   307     11788        50883      4.3      3.0                          ynum = (square.y - y) / abs(square.y - y)
   308                                                               else:
   309     11788        39005      3.3      2.3                          ynum = 0
   310                                                           else:
   311     11788        38608      3.3      2.3                      xnum = 0
   312     11788        45469      3.9      2.7                      num = abs(square.y - y)
   313     11788        51186      4.3      3.0                      ynum = (square.y - y) / abs(square.y - y)
   314                                           
   315                                           
   316    101040       383510      3.8     22.8                  for number in xrange(1, num):
   317     65676       290857      4.4     17.3                      if not b[x + xnum * number][y + ynum * number].image == 0:
   318     34707       118916      3.4      7.1                          test = False
   319     35364       128811      3.6      7.7                  return test and not square == 0 and (square.image == 0 or not square.color == color)

